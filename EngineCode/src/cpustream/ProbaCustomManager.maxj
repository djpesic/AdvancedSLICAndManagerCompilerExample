package cpustream;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.Demux;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.Mux;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class ProbaCustomManager extends CustomManager{

	public ProbaCustomManager(EngineParameters engineParams) {
		super(engineParams);
		Kernel kAdder=new KernelAdder(makeKernelParameters("KernelAdder"));
		KernelBlock kbAdder=addKernel(kAdder);
		Kernel kSubtractor=new KernelSubtractor(makeKernelParameters("KernelSubtractor"));
		KernelBlock kbSubtractor=addKernel(kSubtractor);
		Kernel kMultiplier=new KernelMultiplier(makeKernelParameters("KernelMultiplier"));
		KernelBlock kbMultiplier=addKernel(kMultiplier);

		DFELink x=addStreamFromCPU("x");
		DFELink y=addStreamFromCPU("y");

		Demux demuxX=demux("demuxX");
		Demux demuxY=demux("demuxY");

		demuxX.getInput()<==x;
		demuxY.getInput()<==y;



		kbAdder.getInput("x")<==demuxX.addOutput("x_add");
		kbAdder.getInput("y")<==demuxY.addOutput("y_add");
		kbSubtractor.getInput("x")<==demuxX.addOutput("x_sub");
		kbSubtractor.getInput("y")<==demuxY.addOutput("y_sub");
		kbMultiplier.getInput("x")<==demuxX.addOutput("x_mul");
		kbMultiplier.getInput("y")<==demuxY.addOutput("y_mul");

		Mux muxRes=mux("muxRes");
		muxRes.addInput("res_add")<==kbAdder.getOutput("s");
		muxRes.addInput("res_sub")<==kbSubtractor.getOutput("s");
		muxRes.addInput("res_mul")<==kbMultiplier.getOutput("s");


		addStreamToCPU("z")<==muxRes.getOutput();


	}

	public EngineInterface interfaceDefault(){
		EngineInterface ei=new EngineInterface();
		InterfaceParam size=ei.addParam("size", CPUTypes.INT32,"length of streams");
		ei.setTicks("KernelAdder", size);
		ei.setTicks("KernelSubtractor", size);
		ei.setTicks("KernelMultiplier",size);
		ei.setStream("x", CPUTypes.INT32, size*CPUTypes.INT32.sizeInBytes());
		ei.setStream("y", CPUTypes.INT32, size*CPUTypes.INT32.sizeInBytes());
		ei.setStream("z", CPUTypes.INT32, size*CPUTypes.INT32.sizeInBytes());

		return ei;
	}

	public static void main(String[] args){
		EngineParameters params=new EngineParameters(args);
		ProbaCustomManager manager=new ProbaCustomManager(params);
		manager.createSLiCinterface(manager.interfaceDefault());
		manager.build();
	}


}
